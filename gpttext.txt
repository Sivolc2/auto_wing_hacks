Hello! Can you take this:
```
import mermaid
from pathlib import Path


# New imports
import openpyxl
import streamlit as st

from langchain import SQLDatabase
from langchain.agents import AgentType
from langchain.agents import initialize_agent, Tool
from langchain.callbacks import StreamlitCallbackHandler
from langchain.chains import LLMMathChain, SQLDatabaseChain
from langchain.llms import OpenAI
from langchain.utilities import DuckDuckGoSearchAPIWrapper
from langchain.agents import load_tools
from streamlit_agent.callbacks.capturing_callback_handler import playback_callbacks
from streamlit_agent.clear_results import with_clear_container
from langchain.utilities import GoogleSerperAPIWrapper

from product_search import search_for_products

import os

DB_PATH = (Path(__file__).parent / "Chinook.db").absolute()

SAVED_SESSIONS = {
    "Who is Leo DiCaprio's girlfriend? What is her current age raised to the 0.43 power?": "leo.pickle",
    "What is the full name of the artist who recently released an album called "
    "'The Storm Before the Calm' and are they in the FooBar database? If so, what albums of theirs "
    "are in the FooBar database?": "alanis.pickle",
}
# st.title("ðŸ¦œ LangChain: Chat with search")
st.set_page_config(
    page_title="Lumos", page_icon="ðŸ¦œ", layout="wide", initial_sidebar_state="collapsed"
)

"# ðŸ¦œðŸ”— Lumos"

# Setup credentials in Streamlit
# user_openai_api_key = st.sidebar.text_input(
#     "OpenAI API Key", type="password", help="Set this to run your own custom questions."
# )

# if user_openai_api_key:
#     openai_api_key = user_openai_api_key
#     enable_custom = True
# else:
#     openai_api_key = "not_supplied"
#     enable_custom = False
openai_api_key = st.write(
    os.environ["OPENAI_API_KEY"] == st.secrets["OPENAI_API_KEY"],
)
enable_custom = True

# Tools setup
llm = OpenAI(temperature=0, openai_api_key=openai_api_key, streaming=True)
# search = DuckDuckGoSearchAPIWrapper()
llm_math_chain = LLMMathChain.from_llm(llm)
db = SQLDatabase.from_uri(f"sqlite:///{DB_PATH}")
db_chain = SQLDatabaseChain.from_llm(llm, db)
search_google = GoogleSerperAPIWrapper()
tools = [
    # Tool(
    #     name="Search",
    #     func=search.run,
    #     description="useful for when you need to answer questions about current events. You should ask targeted questions",
    # ),
    Tool(
        name="Calculator",
        func=llm_math_chain.run,
        description="useful for when you need to answer questions about math",
    ),
    Tool(
        name="FooBar DB",
        func=db_chain.run,
        description="useful for when you need to answer questions about FooBar. Input should be in the form of a question containing full context",
    ),
    Tool(
       name="Mermaid",
       func=mermaid.run,
       description="will display the provided mermaid diagram to the user. Input should be a mermaid diagram"
    ),
    Tool(
        name="Search Google",
        func=search_google.run,
        description="useful for when you need to ask with search"
    )
]

# Initialize agent
mrkl = initialize_agent(tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True)


# Existing imports and setup
tabs = st.tabs(["QA", "Product Search"])

with tabs[0]:
    with st.form(key="form"):
        if not enable_custom:
            "Ask one of the sample questions, or enter your API Key in the sidebar to ask your own custom questions."
        prefilled = st.selectbox("Sample questions", sorted(SAVED_SESSIONS.keys())) or ""
        user_input = ""

        if enable_custom:
            user_input = st.text_input("Or, ask your own question")
        if not user_input:
            user_input = prefilled
        submit_clicked = st.form_submit_button("Submit Question")

# QA tab code
with tabs[1]:

    products = st.text_input("Enter comma-separated list of products")
    
    if products:

        products = [p.strip() for p in products.split(",")]

        for product in products:

            st.header(product)

            file_name = f"{product.replace(' ','_')}.xlsx"

            mrkl.run(product, tool="Search Google")
            # search_for_products(product)

            if Path(file_name).exists():

                df = openpyxl.load_workbook(file_name).active

                st.dataframe(df)

                st.download_button(

                    label="ðŸ“¥ Download Results",

                    data=df.excel.bytes,

                    file_name=file_name

                )

# output_container = st.empty()
# if with_clear_container(submit_clicked):
#     output_container = output_container.container()
#     output_container.chat_message("user").write(user_input)

#     answer_container = output_container.chat_message("assistant", avatar="ðŸ¦œ")
#     st_callback = StreamlitCallbackHandler(answer_container)

#     # If we've saved this question, play it back instead of actually running LangChain
#     # (so that we don't exhaust our API calls unnecessarily)
#     if user_input in SAVED_SESSIONS:
#         session_name = SAVED_SESSIONS[user_input]
#         session_path = Path(__file__).parent / "runs" / session_name
#         print(f"Playing saved session: {session_path}")
#         answer = playback_callbacks([st_callback], str(session_path), max_pause_time=2)
#     else:
#         answer = mrkl.run(user_input, callbacks=[st_callback])

#     answer_container.write(answer)
```
And identify potential issues, and fix line 'mrkl.run(product, tool="Search Google")' and have it pass product summarizes into excel



# Initialize agent
mrkl = initialize_agent(tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True)

tool_order_prompt = """
The tools should be used in this order for answering questions:
1. Use your knowledge to create a list of what products go into the user-specified item (ie 'coffee' breaks down into 'coffee beans', 'milk', and 'sugar')
2. SearchG - Use this to search the internet for potential products
You should follow this order whenever possible when answering the user's questions.
"""